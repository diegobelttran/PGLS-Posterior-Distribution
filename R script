### Required packages
library(BAMMtools)
library(ape)
library(coda)
library(nlme)
library(scales)
library(phytools)
library(phangorn)

#phylogenetic trees, need to be dated and ultrametric
#I had the original tree and variations of it, because my male/female representation varied, I have a 'different' phylogeny
#for males and females, and I also have a 'unisex' phylogeny with those species with trait data for both sexes
tree <- read.tree('yourtree.tre')
#male, female and unisex trees
tree_M <- read.tree('yourtreeM.tre.tre')
tree_F <- read.tree('yourtreeF.tre.tre')
treeU <- read.tree('yourtreeU.tre.tre')

#I made a copy of the tree just so I wouldn't mess with the original
copy <- tree

#trait data for males and females of each species
males_avg <- read.table('male_trait_data.txt',h=T,sep='\t')
females_avg <- read.table('female_trait_data.txt',h=T,sep='\t')

#speciation rates obtained from BAMM, for all species in the phylogeny
sp_r <- read.table('sp_rates_all.txt',h=T,sep='\t')

#trait evolution rates per species obtained from BAMM for males
trait_mBeta <- read.table('trait_m_rates.txt',h=T,sep='\t')
#add species names as row names
rownames(trait_mBeta) <- trait_mBeta$Species
#filter out sp rates of species without trait data for males
sp_m <- sp_r[-which(is.na(match(sp_r$Species,trait_mBeta$Species))),]
rownames(sp_m) <- sp_m$Species
#add sp rates to the trait evolution rates table
trait_mBeta$Lambda <- sp_m$Lambda


#same process with females
trait_fBeta <- read.table('trait_fBeta_rates.txt',h=T,sep='\t')
rownames(sex_bri_fBeta) <- sex_bri_fBeta$Species
sp_f <- sp_r[-which(is.na(match(sp_r$Species,trait_fBeta$Species))),]
rownames(sp_f) <- sp_f$Species
trait_fBeta$Lambda <- sp_f$Lambda



####create a new trait evolution rates table with only species with data for both sexes
#here I match the names of the species in the trait evolution rate table with the names in the sp rate table
trait_mBeta <- trait_mBeta[-which(is.na(match(trait_mBeta$Species,sp_f$Species))),]
trait_fBeta <- trait_fBeta[-which(is.na(match(trait_fBeta$Species,sp_m$Species))),]
#since the male and female tables were in the same order I can simply bind them togeher in a new dataframe
trait <- data.frame(Species=trait_mBeta$Species,Lambda=trait_mBeta$Lambda,BetaM=trait_mBeta$Beta,BetaF=trait_fBeta$Beta)
#add rownames
rownames(trait) <- trait$Species


#read a taxonomy table, where I have all the scientific names of all species and the subclade they belong to
tax <- read.table('~/Documents/Tax.txt',h=T,sep="\t")
#create subsets with each subclade
brilliants <- tax[which(tax$Clado == 'Brilliants'),]
bees <- tax[which(tax$Clade == 'Bees'),]
topazes <- tax[which(tax$Clade == 'Topazes'),]
hermits <- tax[which(tax$Clade == 'Hermits'),]
emeralds <- tax[which(tax$Clade == 'Emeralds'),]
gems <- tax[which(tax$Clade == 'Mtn_Gems'),]
coquettes <- tax[which(tax$Clade == 'Coquettes'),]
mangoes <- tax[which(tax$Clade == 'Mangoes'),]

#use the taxonomy table to add the scientific name to each species in the trait data
males_avg$Scientific_name <- tax[match(males_avg$Species,tax$ID_taxonomy),'Scientific_name']
females_avg$Scientific_name <- tax[match(females_avg$Species,tax$ID_taxonomy),'Scientific_name']

#my tree doesn't have node labels, so I create a new version of the phylogeny with node labels
copy2 <- makeNodeLabel(copy, method ='number', prefix='')
copia2$node.label <- 294:585
#prune those species without trait data from the 'male' tree
what <- match(copy2$tip.label,unique(males_avg$Scientific_name))
drops <- which(is.na(what) == T)
copy_M <- drop.tip(copy2, drops)

#same process for females
what <- match(copy2$tip.label,unique(females_avg$Scientific_name))
drops <- which(is.na(what) == T)
copy_F <- drop.tip(copy2, drops)

#now for the unisex tree
what <- which(is.na(match(copy2$tip.label,trait$Species))==T)
copy_U <- drop.tip(copy2,what)

#number of nodes of the 9 subclades in the hummingbird family
nodes <- c(296,299,329,356,401,446,449,463,490)

#now we import the bammdata objects containing all the posterior distribution (event data), for sp rates and for trait evolution rates
sp_pos <- getEventData(tree,'BAMM_event_sp_data.txt',burnin=0.1,type='diversification')

#male trait posterior
traitM_pos <- getEventData(tree_M,'BAMM_rait_event_data.txt',burnin=0.1,type = "trait")
#female trait porsterior
traitF_pos <- getEventData(tree_F,'BAMM_trait_event_data.txt',burnin=0.1,type = "trait")


#take 1000 samples from the posterior distributions
sp_sub1 <- sp_pos[sample(1000)]
traitM_sub1 <- traitM_pos[sample(1000)]
traitF_sub1 <- traitF_pos[sample(1000)]

#create an empty dataframe where all the PGLS coefficients from each sample from the posterior will be stored
#the last column gives the number of clades with different rates according to each BAMM configuration from our sample
coef_trait <- data.frame(matrix(NA,ncol=7))
names(coef_trait) <- c('Intercept','Male_slope','Female_slope','p-value_Intercept','p-value_Male','p-value_Female','Number_clades')

#here goes the loop to do PGLS by clade according to each sample from the posterior
for (u in 1:1000){

#creo un data frame con los nodos del arbol asignados por bamm en el arbol de machos y los del arbol original completo
nodos_1 <- data.frame(nodo.actual= 257:(256+255), nodo.orig=copia_M$node.label)
#obtengo los cambios que ocurrieron en terminales, es decir los cambios en 'nodos' menores a 257 que es el primer nodo del arbol cortado
cuales <- which(sex_bri_m_r_sub1$eventData[[u]]$node < 257)
#nodos donde ocurrieron cambios que no son terminales
cuales.no <- which(sex_bri_m_r_sub1$eventData[[u]]$node >= 257)
#especies donde ocurrio el cambio en el arbol que se analizo en bamm
especies.orig <- copia_M$tip.label[sex_bri_m_r_sub1$eventData[[u]]$node[cuales]]
#especies donde ocurrio el cambio en el arbol completo
especies.comp <- match(especies.orig, copia2$tip.label)
#nuevo vector con nodos y terminales segun arbol completo
v.final <- v.final.0 <- sex_bri_m_r_sub1$eventData[[u]]$node
v.final[cuales] <- especies.comp
v.final[cuales.no] <- nodos_1[match(v.final.0[cuales.no],nodos_1[,1]),2]


#creo un data frame con los nodos del arbol asignados por bamm y los del arbol original completo
nodos_1F <- data.frame(nodo.actual= (length(copia_F$tip.label)+1):(length(copia_F$tip.label)+length(copia_F$tip.label)-1), nodo.orig=copia_F$node.label)
#obtengo los cambios que ocurrieron en terminales, es decir los cambios en 'nodos' menores a 257 que es el primer nodo del arbol cortado
cualesF <- which(sex_bri_f_r_sub1$eventData[[u]]$node < length(copia_F$tip.label)+1)
#nodos donde ocurrieron cambios que no son terminales
cuales.noF <- which(sex_bri_f_r_sub1$eventData[[u]]$node >= length(copia_F$tip.label)+1)
#especies donde ocurrio el cambio en el arbol que se analizo en bamm
especies.origF <- copia_F$tip.label[sex_bri_f_r_sub1$eventData[[u]]$node[cualesF]]
#especies donde ocurrio el cambio en el arbol completo
especies.compF <- match(especies.origF, copia2$tip.label)
#nuevo vector con nodos y terminales segun arbol completo
v.finalF <- v.final.0F <- sex_bri_f_r_sub1$eventData[[u]]$node
v.finalF[cualesF] <- especies.compF
v.finalF[cuales.noF] <- nodos_1F[match(v.final.0F[cuales.noF],nodos_1F[,1]),2]




#agregar cambios de especiacion y clados, obteniendo solo los clados unicos, sin repeticiones
v.final2 <- unique(c(v.final,v.finalF,sp_r_sub1$eventData[[u]]$node,nodos))

#creo un data frame con los nodos del arbol asignados por bamm y los del arbol original completo
nodos_2 <- data.frame(nodo.actual= 238:(237+236), nodo.orig=copia_U$node.label)
#obtengo los numeros de las ramas donde hubo cambios
cuales <- which(v.final2 < 294)
#obtengo los numeros de los nodos donde hubo cambios
cuales.no <- which(v.final2 >= 294)
#especies donde ocurrieron cambios segun el arbol completo
cuales.sp <- copia2$tip.label[v.final2[cuales]]
#especies donde ocurrieron cambios en el arbol unisex
esp.final <- na.omit(match(cuales.sp, copia_U$tip.label))
#nodos donde ocurrieron cambios en el arbol unisex
nod.final <- na.omit(nodos_2[match(v.final2[cuales.no],nodos_2[,2]),1])
#nuevo vector con las especies y nodos donde ocurrieron cambios en el arbol unisex
v.uni <- c(esp.final,nod.final)

#se obtienen los nodos y terminales descendientes de todos los nodos
des <- Descendants(copia_U,node=v.uni,type='all')

#creo una tabla con el numero de nodos o terminales de v.uni que estan contenidos en otro
nodos_c <- data.frame(matrix(NA,ncol=2,nrow=length(v.uni)))
names(nodos_c) <- c('Nodo','Nodos_contenidos')
rep <- lapply(des,FUN=function(x) match(v.uni,x))
nodos_c[,1] <- v.uni
nodos_c[,2] <- sapply(rep, FUN=function(x) length(na.omit(x)))

#lista con las terminales de cada uno de los nodos en nodos_c
terminales <- Descendants(copia_U,node=v.uni,type='tips')

###
terminal.final <- terminales
#cuales nos interesa modificar. Nodos con al menos una terminal o un nodo en su interior.
cuales.nodos <- nodos_c[nodos_c[,1] > 237 & nodos_c[,2] > 0 ,1]

for (i in 1:length(cuales.nodos)) {
pos <- match(cuales.nodos, nodos_c[,1])

#nodos y terminales que contiene el nodo i
nodos.cont <- des[[pos[i]]][na.omit(rep[[pos[i]]])]
#terminales que contienen todos esos nodos
tip.menos <- unique(do.call(c,terminales[match(nodos.cont, nodos_c[,1])]))
#terminales que contiene nodo i
tip.i <- terminales[[pos[i]]]
#verificar si nodo se elimina (todas las terminales estan contenidas en otros nodos)
if (length(is.na(match(tip.menos, tip.i)) == FALSE) == length(tip.i)) { 
terminal.final[[pos[i]]] <- 0
#si Verdadero, se elimina nodo
} else {  
tip.i.fin <- tip.i[-(match(tip.menos, tip.i))]
terminal.final[[pos[i]]] <- tip.i.fin
}
}

if (length(is.na(match(tip.menos, tip.i)) == FALSE) == length(tip.i)) terminal.final[[pos[i]]] <- NULL

#creo un indice de los nodos que no son vacios
indice <- which(do.call(c,lapply(terminal.final,function(x) (x[1] == 0))) == FALSE)
#cuales nodos
nodos.graf <- do.call(c,(terminal.final[indice]))
#cuantos nodos
cuan.nodo <- do.call(c,lapply(terminal.final[indice], length))
#cols <- rainbow(length(cuan.nodo))
#colores <- rep(cols,cuan.nodo)
#plot(copia_U, show.tip.label=FALSE)
#nodelabels(node=nodos.graf,frame='none', cex=0.5, col=colores)


####obtener los nombres de las terminales finales
nombres.final <- terminal.final
for (i in 1:length(terminal.final)){
if(length(terminal.final[[i]]) == 0){
next} else {
nombres.final[[i]] <- copia_U$tip.label[nombres.final[[i]]]
}
}

#creo el vector que va a agrupar las especies en los nodos que se establecieron
grupos <- rep(1:length(indice),cuan.nodo)
#reordeno la tabla sex_bri para que quede en el orden de nombres.final usando los rownames
sex_bri_grupos <- sex_bri[do.call(c,nombres.final),]
#obtengo los promedios por nodo
betaM <- tapply(sex_bri_grupos$BetaM, INDEX=grupos, FUN=mean)
betaF <- tapply(sex_bri_grupos$BetaF, INDEX=grupos, FUN=mean)
lambda <- tapply(sex_bri_grupos$Lambda, INDEX=grupos, FUN=mean)
sex_briC <- data.frame(Lambda=lambda,BetaM=betaM,BetaF=betaF)
#agrego los rownames de las especies que van a representar cada uno de los nodos (clados)
rownames(sex_briC ) <- rownames(sex_bri_grupos)[match(1:length(indice),grupos)]


#estos son las especies que son diferentes a las representantes y se van a cortar del arbol
podar <- rownames(sex_bri_grupos)[(1:length(grupos))[-(match(1:length(indice),grupos))]]
#arbol solo con las ramas representantes
subtre1 <- drop.tip(copia_U,podar)
#pgls aditivo con los dos sexos
pgls_sex_bri <- gls(Lambda ~ BetaM + BetaF ,data=sex_briC,correlation= corBrownian(phy=subtre1), method="REML")
summ <- as.data.frame(summary(pgls_sex_bri)$tTable)
coef(pgls_sex_bri)
#plot(Lambda ~ BetaM,data=sex_briC,pch=16,xlab="Brightness evolution rates",ylab="Speciation rates",ylim=c(0.15,0.35),cex=1.6,main='Sexual selection patches',cex.lab=1.4,cex.axis=1.4,cex.main=1.5)


#lleno la tabla coef_sex_bri con los coeficientes de cada iteracion/muestra de la distribucion posterior
coef_sex_bri[u,1:3] <- t(summ[,1])
coef_sex_bri[u,4:6] <- t(summ[,4])
coef_sex_bri[u,'Number_clades'] <- length(unique(grupos))
}

hist(coef_sex_bri$Male_slope)
abline(v=0.53349536,lwd=2,col='red')
quantile(coef_sex_bri$Male_slope,c(0.05,0.95))
0.53349536 > quantile(coef_sex_bri$Male_slope,c(0.05,0.95))[2]
# 95% 
#TRUE 

hist(coef_sex_bri[which(coef_sex_bri[,5] <0.05),'Male_slope'],main='Histogram of 1000 PGLS regression coefficients',xlab='Significant Male slope coefficients',cex.lab=1.45,cex.axis=1.3)
